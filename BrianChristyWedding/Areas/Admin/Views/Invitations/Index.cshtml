@model IEnumerable<BrianChristyWedding.Models.Invitation>

@{
    ViewBag.Title = "Invitations";
}

<h2>@ViewBag.Title</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>Shortcode</th>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Address</th>
        <th>Number allowed</th>
        <th>RSVP</th>
        <th></th>
    </tr>
@{ 
    var totalInvitations = 0;
    var totalInvitedGuests = 0;
    var totalAttendingResponses = 0;
    var totalNotAttendingResponses = 0;
    var totalAttendingGuests = 0;
    var totalNotAttendingGuests = 0;

}
@foreach (var item in Model)
{
    <tr>
        <td class="shortcode">@(Html.Raw(item.Shortcode))</td>
        <td>@(Html.DisplayFor(modelItem => item.FirstName))</td>
        <td>@(Html.DisplayFor(modelItem => item.LastName))</td>
        <td>@(Html.DisplayFor(modelItem => item.Address))</td>
        <td>@(Html.DisplayFor(modelItem => item.MaxAllowedGuests))</td>
        <td>@(item.Rsvp == null ? Html.Raw("None") : Html.ActionLink(string.Format("{0} guests", item.Rsvp.Guests.Count), "Details", "Rsvps", new { id = item.Rsvp.InvitationID }, null))</td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id = item.ID }) |
            @Html.ActionLink("Details", "Details", new { id = item.ID }) |
            @Html.ActionLink("Delete", "Delete", new { id = item.ID })
        </td>
    </tr>
    totalInvitations++;
    totalInvitedGuests += item.MaxAllowedGuests;
    if (item.Rsvp != null)
    {
        if(item.Rsvp.Guests.Count > 0)
        {
            totalAttendingResponses++;
            totalAttendingGuests += item.Rsvp.Guests.Count;
        }
        else
        {
            totalNotAttendingResponses++;
            totalNotAttendingGuests += item.Rsvp.Guests.Count;
        }
    }
}
</table>
@Html.ActionLink("Export to CSV", "Export")

<br />
<h3>Totals</h3>
<table class="table">
    <tr>
        <th></th>
        <th>Total</th>
        <th>Answered</th>
        <th>Unanswered</th>
        <th>Percent Responded</th>
    </tr>
    <tr>
        <th>Invitations</th>
        <td>@totalInvitations</td>
        <td>@(totalAttendingResponses + totalNotAttendingResponses)</td>
        <td>@(totalInvitations - totalAttendingResponses - totalNotAttendingResponses)</td>
        <td>
            @{ 
                var percent = (double)(totalAttendingResponses + totalNotAttendingResponses) / (double)totalInvitations * 100.0;
                @Html.Raw(percent.ToString("N0") + "%");
            }
        </td>
    </tr>
</table>
<br />
<table class="table">
    <tr>
        <th></th>
        <th>Attending</th>
        <th>Not Attending</th>
        <th>Remaining</th>
    </tr>
    <tr>
        <th>Responses</th>
        <td>@totalAttendingResponses</td>
        <td>@totalNotAttendingResponses</td>
        <td>@(totalInvitations - (totalAttendingResponses + totalNotAttendingResponses))</td>
    </tr>
</table>

<br />
<table class="table">
    <tr>
        <th></th>
        <th>Attending</th>
        <th>Not Attending</th>
        <th>Remaining</th>
        <th>Attending Percentage</th>
        <th>Estimated Turnout</th>
        <th>Worst-Case Scenario</th>
    </tr>
    <tr>
        <th>Guests</th>
        <td>@totalAttendingGuests</td>
        <td>@totalNotAttendingGuests</td>
        <td>
            @{
                var remainingGuests = totalInvitedGuests - (totalAttendingGuests + totalNotAttendingGuests);
            }
            @remainingGuests
        </td>
        <td>
            @{
                percent = (double)totalAttendingGuests / (double)(totalAttendingGuests + totalNotAttendingGuests) * 100.0;
                @Html.Raw(percent.ToString("N0") + "%");
            }
        </td>
        <td>@(totalAttendingGuests + (remainingGuests * (percent / 100)))</td>
        <td>@(totalInvitedGuests - totalNotAttendingGuests)</td>
    </tr>
</table>
